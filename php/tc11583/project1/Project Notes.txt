Project Notes.txt

This document tracks changes to the project made since the original class presentation. 

Project1 Major changes

First, inc_baseclasses.php was removed and all classes separated into individual files as some classes such as Auth were getting large.

Next, project-specific configuration such as database settings, Auth config, etc. were moved out of init.php into inc_config.php and inc_bootstrap.php. Again, the idea is to keep as much project configuration code together and separated from the core system. That way the core system could be updated without affecting the project code.

The reason why there are two files is that some items (such as database credential information) needs to be defined BEFORE some things (such as database initialization), while other items need to be defined AFTER such things (such as Auth configuration).

$base_path was moved out of the Config class and defined as a constant instead.

Now that the basic controller and user authentication is in place, in this iteration we shall separate the view code and markup further from the controller.

Instead of including the template file directly into the controller, or generating output within the controller, we move that functionality to a View class method called render(). The controller's constructor creates an instance of the View class, saving it as a member object.

To expose data in the controller to the new view instance, we call the view's set() method. This is a standard setter that adds the controller data to an array in the view instance.

When render() is called, the view extracts the values from the array, then includes the controller->method template. Output buffering is used to capture output generated by the template file, saving it to a variable. This variable then becomes accessible for use by the main layout template, which is included and captured just like the previous template. The completed view content is then output.

Notice in content->view() we see several things:

Enumerations for content_type and content_status were added to Config and passed into the view to be used by the template file.

When viewing a single record rather than a list of records, we specify a DIFFERENT template to use when calling View->render().


TODO (i.e. additional homework):
-------------------------------
Prior to including the template files in render(), check whether the file exists and throw an exception to stop the application if they don't. (Depending on the server settings, require() simply stops silently with no notices, so explicitly generating an error is useful to indicate the code is not complete.) Hints: See Auth::redirectToLogin() for an example of manually throwing an exception. Also consider using file_exists().

Add links to the content view table to view individual content item details.

...?


